# Technion project base Ubuntu 18.04 environment container.
# For x86 systems.
#
# Federico Oliva <lvofrc95@outlook.it>
#
# April 3, 2023

# BUILD THIS WITH:
# --network host

# Start from a Bionic image for linux/amd64
FROM --platform=linux/amd64 ros:noetic-ros-base-focal

ENV DEBIAN_FRONTEND=noninteractive

# Copy mirrored sources list
COPY sources_focal.list /etc/apt/sources.list

# Install basic utilities
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils \
    ca-certificates \
    curl \
    gnupg2 \
    iproute2 \
    lsb-core \
    lsb-release \
    openssh-client \
    python3 \
    python3-pip \
    software-properties-common \
    sudo && \
    add-apt-repository universe && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Install language and locales
RUN apt-get update && apt-get install -y --no-install-recommends \
    locales && \
    locale-gen en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*
ENV LANG en_US.UTF-8

# Install Python dependencies
RUN yes | pip3 install --upgrade pip setuptools
RUN yes | pip3 install -U \
    argcomplete \
    argparse \
    cerberus \
    coverage \
    flake8 \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-docstrings \
    flake8-import-order \
    flake8-quotes \
    jinja2 \
    matplotlib \
    numpy \
    nunavut \
    packaging \
    pandas \
    pkgconfig \
    pymavlink \
    pyros-genmsg \
    pyserial \
    pytest \
    pytest-cov \
    python-dateutil \
    pytest-repeat \
    pytest-runner \
    pytest-rerunfailures \
    pyulog \
    requests \    
    six \
    testresources \
    toml \
    transitions \
    wheel

# Install development tools and other dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    astyle \
    build-essential \
    ccache \
    cmake \
    cppcheck \
    file \
    g++ \
    gcc \
    gdb \
    gedit \
    git \
    htop \
    less \
    lcov \
    make \
    manpages-posix-dev \
    minicom \
    nano \
    neofetch \
    ninja-build \
    pylint3 \
    python3-vcstool \
    screen \
    shellcheck \
    tree \
    uncrustify \
    unzip \
    valgrind \
    vim \
    wget \
    xclip \
    zip && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Install Java 11
RUN apt-get update && apt-get install -y --no-install-recommends \
    ant \
    openjdk-11-jre \
    openjdk-11-jdk \
    libvecmath-java && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/* && \
    update-alternatives --set java $(update-alternatives --list java | grep "java-11")

# Install Zsh
RUN apt-get update && apt-get install -y --no-install-recommends \
    zsh \
    zsh-doc \
    chroma && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Install Pangolin dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    libavdevice-dev \
    libglew-dev \
    libpython2.7-dev && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Install OpenCV dependencies
RUN add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
    apt-get update && apt-get install -y --no-install-recommends \
    libavcodec-dev \
    libavformat-dev \
    libdc1394-22-dev \
    libgtk2.0-dev \
    libjasper1 \
    libjasper-dev \
    libjpeg-dev \
    libpng-dev \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libtiff-dev \
    pkg-config \
    python-dev \
    python-numpy \
    python3-numpy && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Install Boost C++ libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    libboost-all-dev && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Cleanup
RUN apt-get update && apt-get remove -y modemmanager && \
    apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

WORKDIR /opt

# Build and install OpenCV (with extra modules aka "contrib")
RUN git clone --single-branch --branch '4.5.5' --depth 1 https://github.com/opencv/opencv.git && \
    git clone --single-branch --branch '4.5.5' --depth 1 https://github.com/opencv/opencv_contrib.git && \
    cd opencv && \
    mkdir build && \
    cd build && \
    cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D WITH_TBB=ON \
    -D WITH_EIGEN=ON \
    -D WITH_V4L=ON \
    -D BUILD_TBB=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_TESTS=OFF \
    -D BUILD_opencv_python2=OFF \
    -D BUILD_opencv_python3=ON \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D PYTHON_EXECUTABLE=$(which python2) \
    -D PYTHON3_EXECUTABLE=$(which python3) \
    -D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
    -D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
    .. && \
    make -j$(nproc --all) && \
    make install && \
    ldconfig

WORKDIR /root

ENV DEBIAN_FRONTEND=dialog

# Add image information
LABEL author.name="Federico Oliva"
LABEL author.email="lvofrc95@outlook.it"
LABEL organization="Intelligent Systems Lab"
LABEL description="ROS Ubuntu 18.04 environment container for x86 systems"
LABEL platform="linux/amd64"

# Start shell in container
CMD ["bash"]