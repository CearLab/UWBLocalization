// Generated by gencpp from file jackal_op/GradientDescent.msg
// DO NOT EDIT!


#ifndef JACKAL_OP_MESSAGE_GRADIENTDESCENT_H
#define JACKAL_OP_MESSAGE_GRADIENTDESCENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace jackal_op
{
template <class ContainerAllocator>
struct GradientDescent_
{
  typedef GradientDescent_<ContainerAllocator> Type;

  GradientDescent_()
    : header()
    , J(0.0)
    , GJ()
    , HJ()
    , A()
    , p()
    , pg()
    , N()  {
    }
  GradientDescent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , J(0.0)
    , GJ(_alloc)
    , HJ(_alloc)
    , A(_alloc)
    , p(_alloc)
    , pg(_alloc)
    , N(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _J_type;
  _J_type J;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _GJ_type;
  _GJ_type GJ;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _HJ_type;
  _HJ_type HJ;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _A_type;
  _A_type A;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _p_type;
  _p_type p;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pg_type;
  _pg_type pg;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _N_type;
  _N_type N;





  typedef boost::shared_ptr< ::jackal_op::GradientDescent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jackal_op::GradientDescent_<ContainerAllocator> const> ConstPtr;

}; // struct GradientDescent_

typedef ::jackal_op::GradientDescent_<std::allocator<void> > GradientDescent;

typedef boost::shared_ptr< ::jackal_op::GradientDescent > GradientDescentPtr;
typedef boost::shared_ptr< ::jackal_op::GradientDescent const> GradientDescentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jackal_op::GradientDescent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jackal_op::GradientDescent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jackal_op::GradientDescent_<ContainerAllocator1> & lhs, const ::jackal_op::GradientDescent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.J == rhs.J &&
    lhs.GJ == rhs.GJ &&
    lhs.HJ == rhs.HJ &&
    lhs.A == rhs.A &&
    lhs.p == rhs.p &&
    lhs.pg == rhs.pg &&
    lhs.N == rhs.N;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jackal_op::GradientDescent_<ContainerAllocator1> & lhs, const ::jackal_op::GradientDescent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jackal_op

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jackal_op::GradientDescent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jackal_op::GradientDescent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jackal_op::GradientDescent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jackal_op::GradientDescent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jackal_op::GradientDescent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jackal_op::GradientDescent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jackal_op::GradientDescent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf70146ab5f0d8094fd0d6f86f797d43";
  }

  static const char* value(const ::jackal_op::GradientDescent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf70146ab5f0d809ULL;
  static const uint64_t static_value2 = 0x4fd0d6f86f797d43ULL;
};

template<class ContainerAllocator>
struct DataType< ::jackal_op::GradientDescent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jackal_op/GradientDescent";
  }

  static const char* value(const ::jackal_op::GradientDescent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jackal_op::GradientDescent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 J\n"
"float64[] GJ\n"
"float64[] HJ\n"
"float64[] A\n"
"float64[] p\n"
"float64[] pg\n"
"float64[] N\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::jackal_op::GradientDescent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jackal_op::GradientDescent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.J);
      stream.next(m.GJ);
      stream.next(m.HJ);
      stream.next(m.A);
      stream.next(m.p);
      stream.next(m.pg);
      stream.next(m.N);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GradientDescent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jackal_op::GradientDescent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jackal_op::GradientDescent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "J: ";
    Printer<double>::stream(s, indent + "  ", v.J);
    s << indent << "GJ[]" << std::endl;
    for (size_t i = 0; i < v.GJ.size(); ++i)
    {
      s << indent << "  GJ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.GJ[i]);
    }
    s << indent << "HJ[]" << std::endl;
    for (size_t i = 0; i < v.HJ.size(); ++i)
    {
      s << indent << "  HJ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.HJ[i]);
    }
    s << indent << "A[]" << std::endl;
    for (size_t i = 0; i < v.A.size(); ++i)
    {
      s << indent << "  A[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.A[i]);
    }
    s << indent << "p[]" << std::endl;
    for (size_t i = 0; i < v.p.size(); ++i)
    {
      s << indent << "  p[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.p[i]);
    }
    s << indent << "pg[]" << std::endl;
    for (size_t i = 0; i < v.pg.size(); ++i)
    {
      s << indent << "  pg[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pg[i]);
    }
    s << indent << "N[]" << std::endl;
    for (size_t i = 0; i < v.N.size(); ++i)
    {
      s << indent << "  N[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.N[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JACKAL_OP_MESSAGE_GRADIENTDESCENT_H
