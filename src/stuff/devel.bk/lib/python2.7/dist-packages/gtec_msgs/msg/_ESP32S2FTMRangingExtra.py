# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gtec_msgs/ESP32S2FTMRangingExtra.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gtec_msgs.msg

class ESP32S2FTMRangingExtra(genpy.Message):
  _md5sum = "6ee26c63cfee1bff93dc663fa5bfe36d"
  _type = "gtec_msgs/ESP32S2FTMRangingExtra"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string anchorId
int32 rtt_est
int32 rtt_raw
float32 dist_est
float32 own_est
int32 num_frames
gtec_msgs/ESP32S2FTMFrame[] frames

================================================================================
MSG: gtec_msgs/ESP32S2FTMFrame
int32 rssi
int32 rtt
int64 t1
int64 t2
int64 t3
int64 t4"""
  __slots__ = ['anchorId','rtt_est','rtt_raw','dist_est','own_est','num_frames','frames']
  _slot_types = ['string','int32','int32','float32','float32','int32','gtec_msgs/ESP32S2FTMFrame[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       anchorId,rtt_est,rtt_raw,dist_est,own_est,num_frames,frames

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ESP32S2FTMRangingExtra, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.anchorId is None:
        self.anchorId = ''
      if self.rtt_est is None:
        self.rtt_est = 0
      if self.rtt_raw is None:
        self.rtt_raw = 0
      if self.dist_est is None:
        self.dist_est = 0.
      if self.own_est is None:
        self.own_est = 0.
      if self.num_frames is None:
        self.num_frames = 0
      if self.frames is None:
        self.frames = []
    else:
      self.anchorId = ''
      self.rtt_est = 0
      self.rtt_raw = 0
      self.dist_est = 0.
      self.own_est = 0.
      self.num_frames = 0
      self.frames = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.anchorId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i2fi().pack(_x.rtt_est, _x.rtt_raw, _x.dist_est, _x.own_est, _x.num_frames))
      length = len(self.frames)
      buff.write(_struct_I.pack(length))
      for val1 in self.frames:
        _x = val1
        buff.write(_get_struct_2i4q().pack(_x.rssi, _x.rtt, _x.t1, _x.t2, _x.t3, _x.t4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.frames is None:
        self.frames = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchorId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.anchorId = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.rtt_est, _x.rtt_raw, _x.dist_est, _x.own_est, _x.num_frames,) = _get_struct_2i2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frames = []
      for i in range(0, length):
        val1 = gtec_msgs.msg.ESP32S2FTMFrame()
        _x = val1
        start = end
        end += 40
        (_x.rssi, _x.rtt, _x.t1, _x.t2, _x.t3, _x.t4,) = _get_struct_2i4q().unpack(str[start:end])
        self.frames.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.anchorId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i2fi().pack(_x.rtt_est, _x.rtt_raw, _x.dist_est, _x.own_est, _x.num_frames))
      length = len(self.frames)
      buff.write(_struct_I.pack(length))
      for val1 in self.frames:
        _x = val1
        buff.write(_get_struct_2i4q().pack(_x.rssi, _x.rtt, _x.t1, _x.t2, _x.t3, _x.t4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.frames is None:
        self.frames = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.anchorId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.anchorId = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.rtt_est, _x.rtt_raw, _x.dist_est, _x.own_est, _x.num_frames,) = _get_struct_2i2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frames = []
      for i in range(0, length):
        val1 = gtec_msgs.msg.ESP32S2FTMFrame()
        _x = val1
        start = end
        end += 40
        (_x.rssi, _x.rtt, _x.t1, _x.t2, _x.t3, _x.t4,) = _get_struct_2i4q().unpack(str[start:end])
        self.frames.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2fi = None
def _get_struct_2i2fi():
    global _struct_2i2fi
    if _struct_2i2fi is None:
        _struct_2i2fi = struct.Struct("<2i2fi")
    return _struct_2i2fi
_struct_2i4q = None
def _get_struct_2i4q():
    global _struct_2i4q
    if _struct_2i4q is None:
        _struct_2i4q = struct.Struct("<2i4q")
    return _struct_2i4q
