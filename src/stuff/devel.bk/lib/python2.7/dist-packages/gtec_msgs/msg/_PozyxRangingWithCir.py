# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gtec_msgs/PozyxRangingWithCir.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PozyxRangingWithCir(genpy.Message):
  _md5sum = "57228d0a630edec43d8b895ec4dc9202"
  _type = "gtec_msgs/PozyxRangingWithCir"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 originId
int16 originType
int32 destinationId
int16 destinationType
int32 range
int32 ts
int32 seq
float64 rxPower
float64 channel
float64 datarate
int32 prf
int32 preambleLength
float64 txGain
float64 angle
int16[] cir"""
  __slots__ = ['originId','originType','destinationId','destinationType','range','ts','seq','rxPower','channel','datarate','prf','preambleLength','txGain','angle','cir']
  _slot_types = ['int32','int16','int32','int16','int32','int32','int32','float64','float64','float64','int32','int32','float64','float64','int16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       originId,originType,destinationId,destinationType,range,ts,seq,rxPower,channel,datarate,prf,preambleLength,txGain,angle,cir

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PozyxRangingWithCir, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.originId is None:
        self.originId = 0
      if self.originType is None:
        self.originType = 0
      if self.destinationId is None:
        self.destinationId = 0
      if self.destinationType is None:
        self.destinationType = 0
      if self.range is None:
        self.range = 0
      if self.ts is None:
        self.ts = 0
      if self.seq is None:
        self.seq = 0
      if self.rxPower is None:
        self.rxPower = 0.
      if self.channel is None:
        self.channel = 0.
      if self.datarate is None:
        self.datarate = 0.
      if self.prf is None:
        self.prf = 0
      if self.preambleLength is None:
        self.preambleLength = 0
      if self.txGain is None:
        self.txGain = 0.
      if self.angle is None:
        self.angle = 0.
      if self.cir is None:
        self.cir = []
    else:
      self.originId = 0
      self.originType = 0
      self.destinationId = 0
      self.destinationType = 0
      self.range = 0
      self.ts = 0
      self.seq = 0
      self.rxPower = 0.
      self.channel = 0.
      self.datarate = 0.
      self.prf = 0
      self.preambleLength = 0
      self.txGain = 0.
      self.angle = 0.
      self.cir = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ihih3i3d2i2d().pack(_x.originId, _x.originType, _x.destinationId, _x.destinationType, _x.range, _x.ts, _x.seq, _x.rxPower, _x.channel, _x.datarate, _x.prf, _x.preambleLength, _x.txGain, _x.angle))
      length = len(self.cir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.cir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.originId, _x.originType, _x.destinationId, _x.destinationType, _x.range, _x.ts, _x.seq, _x.rxPower, _x.channel, _x.datarate, _x.prf, _x.preambleLength, _x.txGain, _x.angle,) = _get_struct_ihih3i3d2i2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cir = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ihih3i3d2i2d().pack(_x.originId, _x.originType, _x.destinationId, _x.destinationType, _x.range, _x.ts, _x.seq, _x.rxPower, _x.channel, _x.datarate, _x.prf, _x.preambleLength, _x.txGain, _x.angle))
      length = len(self.cir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.cir.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.originId, _x.originType, _x.destinationId, _x.destinationType, _x.range, _x.ts, _x.seq, _x.rxPower, _x.channel, _x.datarate, _x.prf, _x.preambleLength, _x.txGain, _x.angle,) = _get_struct_ihih3i3d2i2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cir = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ihih3i3d2i2d = None
def _get_struct_ihih3i3d2i2d():
    global _struct_ihih3i3d2i2d
    if _struct_ihih3i3d2i2d is None:
        _struct_ihih3i3d2i2d = struct.Struct("<ihih3i3d2i2d")
    return _struct_ihih3i3d2i2d
