# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gtec_msgs/DWRanging.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DWRanging(genpy.Message):
  _md5sum = "9c822fd6a75d14f97f7679d0a373d617"
  _type = "gtec_msgs/DWRanging"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 anchorId
int16 tagId
int32 range
int32 rawrange
int32 seq
int32 maxNoise
int32 stdNoise
int32 firstPathAmp1
int32 firstPathAmp2
int32 firstPathAmp3
int32 maxGrowthCIR
int32 rxPreamCount
int32 firstPath
float64 channel
int32 prf
float64 datarate
int32 preambleLength
int32 pacSize"""
  __slots__ = ['anchorId','tagId','range','rawrange','seq','maxNoise','stdNoise','firstPathAmp1','firstPathAmp2','firstPathAmp3','maxGrowthCIR','rxPreamCount','firstPath','channel','prf','datarate','preambleLength','pacSize']
  _slot_types = ['int16','int16','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','float64','int32','float64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       anchorId,tagId,range,rawrange,seq,maxNoise,stdNoise,firstPathAmp1,firstPathAmp2,firstPathAmp3,maxGrowthCIR,rxPreamCount,firstPath,channel,prf,datarate,preambleLength,pacSize

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DWRanging, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.anchorId is None:
        self.anchorId = 0
      if self.tagId is None:
        self.tagId = 0
      if self.range is None:
        self.range = 0
      if self.rawrange is None:
        self.rawrange = 0
      if self.seq is None:
        self.seq = 0
      if self.maxNoise is None:
        self.maxNoise = 0
      if self.stdNoise is None:
        self.stdNoise = 0
      if self.firstPathAmp1 is None:
        self.firstPathAmp1 = 0
      if self.firstPathAmp2 is None:
        self.firstPathAmp2 = 0
      if self.firstPathAmp3 is None:
        self.firstPathAmp3 = 0
      if self.maxGrowthCIR is None:
        self.maxGrowthCIR = 0
      if self.rxPreamCount is None:
        self.rxPreamCount = 0
      if self.firstPath is None:
        self.firstPath = 0
      if self.channel is None:
        self.channel = 0.
      if self.prf is None:
        self.prf = 0
      if self.datarate is None:
        self.datarate = 0.
      if self.preambleLength is None:
        self.preambleLength = 0
      if self.pacSize is None:
        self.pacSize = 0
    else:
      self.anchorId = 0
      self.tagId = 0
      self.range = 0
      self.rawrange = 0
      self.seq = 0
      self.maxNoise = 0
      self.stdNoise = 0
      self.firstPathAmp1 = 0
      self.firstPathAmp2 = 0
      self.firstPathAmp3 = 0
      self.maxGrowthCIR = 0
      self.rxPreamCount = 0
      self.firstPath = 0
      self.channel = 0.
      self.prf = 0
      self.datarate = 0.
      self.preambleLength = 0
      self.pacSize = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h11idid2i().pack(_x.anchorId, _x.tagId, _x.range, _x.rawrange, _x.seq, _x.maxNoise, _x.stdNoise, _x.firstPathAmp1, _x.firstPathAmp2, _x.firstPathAmp3, _x.maxGrowthCIR, _x.rxPreamCount, _x.firstPath, _x.channel, _x.prf, _x.datarate, _x.preambleLength, _x.pacSize))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.anchorId, _x.tagId, _x.range, _x.rawrange, _x.seq, _x.maxNoise, _x.stdNoise, _x.firstPathAmp1, _x.firstPathAmp2, _x.firstPathAmp3, _x.maxGrowthCIR, _x.rxPreamCount, _x.firstPath, _x.channel, _x.prf, _x.datarate, _x.preambleLength, _x.pacSize,) = _get_struct_2h11idid2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h11idid2i().pack(_x.anchorId, _x.tagId, _x.range, _x.rawrange, _x.seq, _x.maxNoise, _x.stdNoise, _x.firstPathAmp1, _x.firstPathAmp2, _x.firstPathAmp3, _x.maxGrowthCIR, _x.rxPreamCount, _x.firstPath, _x.channel, _x.prf, _x.datarate, _x.preambleLength, _x.pacSize))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.anchorId, _x.tagId, _x.range, _x.rawrange, _x.seq, _x.maxNoise, _x.stdNoise, _x.firstPathAmp1, _x.firstPathAmp2, _x.firstPathAmp3, _x.maxGrowthCIR, _x.rxPreamCount, _x.firstPath, _x.channel, _x.prf, _x.datarate, _x.preambleLength, _x.pacSize,) = _get_struct_2h11idid2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h11idid2i = None
def _get_struct_2h11idid2i():
    global _struct_2h11idid2i
    if _struct_2h11idid2i is None:
        _struct_2h11idid2i = struct.Struct("<2h11idid2i")
    return _struct_2h11idid2i
