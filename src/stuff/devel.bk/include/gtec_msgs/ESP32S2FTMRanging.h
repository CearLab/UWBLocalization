// Generated by gencpp from file gtec_msgs/ESP32S2FTMRanging.msg
// DO NOT EDIT!


#ifndef GTEC_MSGS_MESSAGE_ESP32S2FTMRANGING_H
#define GTEC_MSGS_MESSAGE_ESP32S2FTMRANGING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gtec_msgs/ESP32S2FTMFrame.h>

namespace gtec_msgs
{
template <class ContainerAllocator>
struct ESP32S2FTMRanging_
{
  typedef ESP32S2FTMRanging_<ContainerAllocator> Type;

  ESP32S2FTMRanging_()
    : anchorId()
    , rtt_est(0)
    , rtt_raw(0)
    , dist_est(0.0)
    , num_frames(0)
    , frames()  {
    }
  ESP32S2FTMRanging_(const ContainerAllocator& _alloc)
    : anchorId(_alloc)
    , rtt_est(0)
    , rtt_raw(0)
    , dist_est(0.0)
    , num_frames(0)
    , frames(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _anchorId_type;
  _anchorId_type anchorId;

   typedef int32_t _rtt_est_type;
  _rtt_est_type rtt_est;

   typedef int32_t _rtt_raw_type;
  _rtt_raw_type rtt_raw;

   typedef float _dist_est_type;
  _dist_est_type dist_est;

   typedef int32_t _num_frames_type;
  _num_frames_type num_frames;

   typedef std::vector< ::gtec_msgs::ESP32S2FTMFrame_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::gtec_msgs::ESP32S2FTMFrame_<ContainerAllocator> >> _frames_type;
  _frames_type frames;





  typedef boost::shared_ptr< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> const> ConstPtr;

}; // struct ESP32S2FTMRanging_

typedef ::gtec_msgs::ESP32S2FTMRanging_<std::allocator<void> > ESP32S2FTMRanging;

typedef boost::shared_ptr< ::gtec_msgs::ESP32S2FTMRanging > ESP32S2FTMRangingPtr;
typedef boost::shared_ptr< ::gtec_msgs::ESP32S2FTMRanging const> ESP32S2FTMRangingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator1> & lhs, const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator2> & rhs)
{
  return lhs.anchorId == rhs.anchorId &&
    lhs.rtt_est == rhs.rtt_est &&
    lhs.rtt_raw == rhs.rtt_raw &&
    lhs.dist_est == rhs.dist_est &&
    lhs.num_frames == rhs.num_frames &&
    lhs.frames == rhs.frames;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator1> & lhs, const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gtec_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "300ca8dcfb5379b480056ad93a9bfd81";
  }

  static const char* value(const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x300ca8dcfb5379b4ULL;
  static const uint64_t static_value2 = 0x80056ad93a9bfd81ULL;
};

template<class ContainerAllocator>
struct DataType< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gtec_msgs/ESP32S2FTMRanging";
  }

  static const char* value(const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string anchorId\n"
"int32 rtt_est\n"
"int32 rtt_raw\n"
"float32 dist_est\n"
"int32 num_frames\n"
"gtec_msgs/ESP32S2FTMFrame[] frames\n"
"\n"
"================================================================================\n"
"MSG: gtec_msgs/ESP32S2FTMFrame\n"
"int32 rssi\n"
"int32 rtt\n"
"int64 t1\n"
"int64 t2\n"
"int64 t3\n"
"int64 t4\n"
;
  }

  static const char* value(const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.anchorId);
      stream.next(m.rtt_est);
      stream.next(m.rtt_raw);
      stream.next(m.dist_est);
      stream.next(m.num_frames);
      stream.next(m.frames);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ESP32S2FTMRanging_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gtec_msgs::ESP32S2FTMRanging_<ContainerAllocator>& v)
  {
    s << indent << "anchorId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.anchorId);
    s << indent << "rtt_est: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rtt_est);
    s << indent << "rtt_raw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rtt_raw);
    s << indent << "dist_est: ";
    Printer<float>::stream(s, indent + "  ", v.dist_est);
    s << indent << "num_frames: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_frames);
    s << indent << "frames[]" << std::endl;
    for (size_t i = 0; i < v.frames.size(); ++i)
    {
      s << indent << "  frames[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gtec_msgs::ESP32S2FTMFrame_<ContainerAllocator> >::stream(s, indent + "    ", v.frames[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GTEC_MSGS_MESSAGE_ESP32S2FTMRANGING_H
