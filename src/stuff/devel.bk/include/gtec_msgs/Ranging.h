// Generated by gencpp from file gtec_msgs/Ranging.msg
// DO NOT EDIT!


#ifndef GTEC_MSGS_MESSAGE_RANGING_H
#define GTEC_MSGS_MESSAGE_RANGING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gtec_msgs
{
template <class ContainerAllocator>
struct Ranging_
{
  typedef Ranging_<ContainerAllocator> Type;

  Ranging_()
    : anchorId(0)
    , tagId(0)
    , range(0)
    , seq(0)
    , rss(0.0)
    , errorEstimation(0.0)  {
    }
  Ranging_(const ContainerAllocator& _alloc)
    : anchorId(0)
    , tagId(0)
    , range(0)
    , seq(0)
    , rss(0.0)
    , errorEstimation(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _anchorId_type;
  _anchorId_type anchorId;

   typedef int16_t _tagId_type;
  _tagId_type tagId;

   typedef int32_t _range_type;
  _range_type range;

   typedef int32_t _seq_type;
  _seq_type seq;

   typedef double _rss_type;
  _rss_type rss;

   typedef double _errorEstimation_type;
  _errorEstimation_type errorEstimation;





  typedef boost::shared_ptr< ::gtec_msgs::Ranging_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gtec_msgs::Ranging_<ContainerAllocator> const> ConstPtr;

}; // struct Ranging_

typedef ::gtec_msgs::Ranging_<std::allocator<void> > Ranging;

typedef boost::shared_ptr< ::gtec_msgs::Ranging > RangingPtr;
typedef boost::shared_ptr< ::gtec_msgs::Ranging const> RangingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gtec_msgs::Ranging_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gtec_msgs::Ranging_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gtec_msgs::Ranging_<ContainerAllocator1> & lhs, const ::gtec_msgs::Ranging_<ContainerAllocator2> & rhs)
{
  return lhs.anchorId == rhs.anchorId &&
    lhs.tagId == rhs.tagId &&
    lhs.range == rhs.range &&
    lhs.seq == rhs.seq &&
    lhs.rss == rhs.rss &&
    lhs.errorEstimation == rhs.errorEstimation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gtec_msgs::Ranging_<ContainerAllocator1> & lhs, const ::gtec_msgs::Ranging_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gtec_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gtec_msgs::Ranging_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gtec_msgs::Ranging_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gtec_msgs::Ranging_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gtec_msgs::Ranging_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gtec_msgs::Ranging_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gtec_msgs::Ranging_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gtec_msgs::Ranging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d30ca10e8481651a0f8849efb5e0d638";
  }

  static const char* value(const ::gtec_msgs::Ranging_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd30ca10e8481651aULL;
  static const uint64_t static_value2 = 0x0f8849efb5e0d638ULL;
};

template<class ContainerAllocator>
struct DataType< ::gtec_msgs::Ranging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gtec_msgs/Ranging";
  }

  static const char* value(const ::gtec_msgs::Ranging_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gtec_msgs::Ranging_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 anchorId\n"
"int16 tagId\n"
"int32 range\n"
"int32 seq\n"
"float64 rss\n"
"float64 errorEstimation\n"
;
  }

  static const char* value(const ::gtec_msgs::Ranging_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gtec_msgs::Ranging_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.anchorId);
      stream.next(m.tagId);
      stream.next(m.range);
      stream.next(m.seq);
      stream.next(m.rss);
      stream.next(m.errorEstimation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ranging_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gtec_msgs::Ranging_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gtec_msgs::Ranging_<ContainerAllocator>& v)
  {
    s << indent << "anchorId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.anchorId);
    s << indent << "tagId: ";
    Printer<int16_t>::stream(s, indent + "  ", v.tagId);
    s << indent << "range: ";
    Printer<int32_t>::stream(s, indent + "  ", v.range);
    s << indent << "seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "rss: ";
    Printer<double>::stream(s, indent + "  ", v.rss);
    s << indent << "errorEstimation: ";
    Printer<double>::stream(s, indent + "  ", v.errorEstimation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GTEC_MSGS_MESSAGE_RANGING_H
