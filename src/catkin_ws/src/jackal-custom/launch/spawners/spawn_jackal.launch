<launch>
  <arg name="ns" default="" />

  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="0" />
  <arg name="yaw" default="0" />
  <arg name="joystick" default="true" />
  <arg name="joy_dev" default="/dev/input/ps4" />

  <arg name="robot_name" default="jackal"/>

  <!-- params and args for jackal_op -->
  <arg name="topicroot" default="" />
  <arg name="ID" default="" />
  <arg name="SubT" default="/gtec/toa/ranging" />   
  
  <!-- Configuration of Jackal which you would like to simulate.
       See jackal_description for details. -->
  <arg name="config" default="base" />
  <arg name="PI" default="3.1415926535897931"/>

  <arg name="rear_id" default="0" />

  <arg name="wheelbase" value="0.262" />
  <arg name="wheel_vertical_offset" value="0.0345" />
  <arg name="wheel_radius" value="0.098" />
  <arg name="wheel_width" value="0.040" />
  <arg name="track" value="0.37559" />
  <arg name="chassis_height" value="0.184" />
  <arg name="mount_spacing" value="0.120" />
  

  <arg name="FLWx" value="$(eval 0.5*arg('wheelbase'))"/>
  <arg name="FLWy" value="$(eval 0.5*arg('track'))"/>
  <arg name="FRWx" value="$(eval 0.5*arg('wheelbase'))"/>
  <arg name="FRWy" value="$(eval -0.5*arg('track'))"/>
  <arg name="RLWx" value="$(eval -0.5*arg('wheelbase'))"/>
  <arg name="RLWy" value="$(eval 0.5*arg('track'))"/>
  <arg name="RRWx" value="$(eval -0.5*arg('wheelbase'))"/>
  <arg name="RRWy" value="$(eval -0.5*arg('track'))"/>

  <group ns="frames"> 

    <!-- TF basic -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_baseLink" args="0 0 0 0 0 0 world base_link"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_map" args="0 0 0 0 0 0 world map"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_odom" args="0 0 0 0 0 0 world odom"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="baseLink_imuLink" args="0 0 0 0 0 0 base_link imu_link"/>

    <!-- TF robot chassis -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="baseLink_chassisLink" args="0 0 0 0 0 0 base_link chassis_link"/>

    <!-- TF wheels FL -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_FrontLeftWheelLink" 
        args="$(arg FLWx) $(arg FLWy) $(arg wheel_vertical_offset) 
        0 0 0 chassis_link front_left_wheel_link"/>
    <!-- TF wheels FR -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_FrontRightWheelLink" 
        args="$(arg FRWx) $(arg FRWy) $(arg wheel_vertical_offset) 
        0 0 0 chassis_link front_right_wheel_link"/>
    <!-- TF wheels RL -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_RearLeftWheelLink" 
        args="$(arg RLWx) $(arg RLWy) $(arg wheel_vertical_offset) 
        0 0 0 chassis_link rear_left_wheel_link"/>
    <!-- TF wheels RR -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_RearRightWheelLink" 
        args="$(arg RRWx) $(arg RRWy) $(arg wheel_vertical_offset) 
        0 0 0 chassis_link rear_right_wheel_link"/>

    <!-- TF robot accessories -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_FrontFender" args="0 0 0 
    0 0 0 chassis_link front_fender_link"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_RearFender" args="0 0 0 
    $(arg PI) 0 0 chassis_link rear_fender_link"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_NavSat" args="-0.180 0.126 0.1815 
    0 0 0 chassis_link navsat_link"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_MidMount" args="0 0 $(arg chassis_height) 
    0 0 0 chassis_link mid_mount"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_RearMount" args="-$(arg mount_spacing) 0 0 
    0 0 0 mid_mount rear_mount"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="chassisLink_FrontMount" args="$(arg mount_spacing) 0 0 
    0 0 0 mid_mount front_mount"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="FrontMount_FrontLaserMount" args="0 0 0 
    0 0 0 front_mount front_laser_mount"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="FrontLaserMount_FrontLaser" args="0 0 0.0474 
    0 0 0 front_laser_mount front_laser"/>

    <!-- TF UWB -->
    <!--node pkg="tf2_ros" type="static_transform_publisher" name="baseLink_rightTag" args="0 -0.161786 0.184 0 0 0 base_link right_tag"/-->
    <!--node pkg="tf2_ros" type="static_transform_publisher" name="baseLink_leftTag" args="0 0.161786 0.184 0 0 0 base_link left_tag"/-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="baseLink_rearTag" args=" -0.5 0 0.184 0 0 0 base_link rear_tag"/>

  </group>

  <group ns="$(arg ns)">

    <!-- Load Jackal's description, controllers, and teleop nodes. -->
    <arg name="env_runner" value="$(eval 'env_run' if not optenv('OS', 'unknown').lower().startswith('windows') else 'env_run.bat')" />
    <param name="robot_description"
         command="$(find jackal_description)/scripts/$(arg env_runner)
                  $(find jackal-custom)/urdf/jackal_custom/configs/$(arg config)
                  $(find xacro)/xacro $(find jackal-custom)/urdf/jackal_custom/custom_jackal.urdf.xacro rear_id:=$(arg rear_id)
                  --inorder" />

    <!-- Control node  -->
    <include file="$(find jackal-custom)/launch/control/control.launch">
      <arg name="enable_ekf" value="true" />
    </include>

    <!-- Teleop node  -->
    <include file="$(find jackal-custom)/launch/control/teleop.launch">
      <arg name="joystick" value="$(arg joystick)" />
      <arg name="joy_dev" value="$(arg joy_dev)" />
    </include>

    <!-- Spawn Jackal -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
                args="-urdf -model jackal -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R 0 -P 0 -Y $(arg yaw)" />

  </group>

  <!-- Navigation node -->
  <!--include file="$(find jackal-custom)/launch/control/navigation/odom_navigation.launch">
  </include-->
  <include file="$(find jackal-custom)/launch/control/navigation/gmapping_wrap.launch">
  </include>
  <include file="$(find jackal_viz)/launch/view_robot.launch">
    <arg name="config" value="gmapping" />
  </include>

  <!-- True Distance measurement node  -->
  <node name="MeshTrue" pkg="jackal_op" type="jack_disttrue" args="MeshTrue 0">
    <rosparam command="load" file="$(find jackal_op)/config/jackal_op_disttrue.yaml"/>
  </node>

  <!-- T0 (rear) Distance handler node -->
  <node name="DT0" pkg="jackal_op" type="jack_disthandle" args="0">
    <rosparam command="load" file="$(find jackal_op)/config/jackal_op_disthandle_T0.yaml"/>
  </node>

  <!-- T0 (rear) HybObs node -->
  <node name="HYB0" pkg="jackal_op" type="jack_hybobs" args="HYB0 0">
    <rosparam command="load" file="$(find jackal_op)/config/jackal_op_hybobs_T0.yaml"/>
  </node>

  <!--group ns="RVIZ">

    <arg name="model" default="$(find jackal-custom)/urdf/jackal_custom/custom_jackal.urdf.xacro"/>
    <arg name="gui" default="true" />
    <arg name="rvizconfig" default="$(find urdf_tutorial)/rviz/urdf.rviz" />
    <param name="robot_description" command="$(find xacro)/xacro ##inorder $(arg model)" />
    <param name="use_gui" value="$(arg gui)"/>
    
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

  </group-->

</launch>