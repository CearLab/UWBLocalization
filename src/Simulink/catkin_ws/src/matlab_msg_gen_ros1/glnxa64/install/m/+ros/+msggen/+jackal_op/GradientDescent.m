
classdef GradientDescent < ros.Message
    %GradientDescent MATLAB implementation of jackal_op/GradientDescent
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jackal_op/GradientDescent' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'bf70146ab5f0d8094fd0d6f86f797d43' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'J' 'GJ' 'HJ' 'A' 'P' 'Pg' 'N' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'J' 'GJ' 'HJ' 'A' 'p' 'pg' 'N' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        J
        GJ
        HJ
        A
        P
        Pg
        N
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'Header')
            obj.Header = val;
        end
        function set.J(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'J');
            obj.J = double(val);
        end
        function set.GJ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'GJ');
            obj.GJ = double(val);
        end
        function set.HJ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'HJ');
            obj.HJ = double(val);
        end
        function set.A(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'A');
            obj.A = double(val);
        end
        function set.P(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'P');
            obj.P = double(val);
        end
        function set.Pg(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'Pg');
            obj.Pg = double(val);
        end
        function set.N(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GradientDescent', 'N');
            obj.N = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jackal_op.GradientDescent.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jackal_op.GradientDescent(strObj);
        end
    end
end
